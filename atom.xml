<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[An Unexpected Coder]]></title>
  <link href="http://ccmeyers.github.io/atom.xml" rel="self"/>
  <link href="http://ccmeyers.github.io/"/>
  <updated>2014-08-10T01:40:51-04:00</updated>
  <id>http://ccmeyers.github.io/</id>
  <author>
    <name><![CDATA[Catherine Meyers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Premature Ajaxulation]]></title>
    <link href="http://ccmeyers.github.io/blog/2014/08/10/premature-ajaxulation/"/>
    
    <updated>2014-08-10T00:01:10-04:00</updated>
    <id>http://ccmeyers.github.io/blog/2014/08/10/premature-ajaxulation</id>
    
    <content type="html"><![CDATA[<h2>Don&rsquo;t worry, it happens to a lot of functions</h2>

<p>Recently, while building an app that used a lot of ajax calls, we kept on running into the problem of an ajax call firing before the function above it finished. Given that the function above provided variables that were necessary in our ajax call, this broke everything.</p>

<p>My team and I scoured the internet (i.e. stack overflow) for an answer, but came up with nothing. We finally asked a Flatiron School TA, and she gave a us a great solution.</p>

<p>We were building an app that calculates the half-way point of a given route. Then, we used the latitude and longitude of that point to search the Yelp API. The ajax call helps us get our javascript variables to the ruby method that directly deals with the API. And, here&rsquo;s what it looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">check_done</span> <span class="o">=</span> <span class="s2">&quot;not done&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">getStopPoint</span><span class="p">(</span><span class="nx">response</span><span class="p">,</span> <span class="nx">percentage</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">totalDist</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">legs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">distance</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">totalTime</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">legs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">duration</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">distance</span> <span class="o">=</span> <span class="p">(</span><span class="nx">percentage</span><span class="o">/</span><span class="mi">100</span><span class="p">)</span> <span class="o">*</span> <span class="nx">totalDist</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">time</span> <span class="o">=</span> <span class="p">((</span><span class="nx">percentage</span><span class="o">/</span><span class="mi">100</span><span class="p">)</span> <span class="o">*</span> <span class="nx">totalTime</span><span class="o">/</span><span class="mi">60</span><span class="p">).</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">polyline</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Polyline</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">path</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nx">strokeColor</span><span class="o">:</span> <span class="s1">&#39;#FF0000&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">strokeWeight</span><span class="o">:</span> <span class="mi">3</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">bounds</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLngBounds</span><span class="p">();</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">steps</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">legs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">steps</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">steps</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">nextSegment</span> <span class="o">=</span> <span class="nx">steps</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">path</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">k</span><span class="o">&lt;</span><span class="nx">nextSegment</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">polyline</span><span class="p">.</span><span class="nx">getPath</span><span class="p">().</span><span class="nx">push</span><span class="p">(</span><span class="nx">nextSegment</span><span class="p">[</span><span class="nx">k</span><span class="p">]);</span>
</span><span class='line'>          <span class="nx">bounds</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">nextSegment</span><span class="p">[</span><span class="nx">k</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="nx">stopPointLatLonObject</span> <span class="o">=</span> <span class="nx">polyline</span><span class="p">.</span><span class="nx">GetPointAtDistance</span><span class="p">(</span><span class="nx">distance</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">placeMarker</span><span class="p">(</span><span class="nx">stopPointLatLonObject</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">stopPointLat</span> <span class="o">=</span> <span class="nx">stopPointLatLonObject</span><span class="p">[</span><span class="s2">&quot;d&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">stopPointLon</span> <span class="o">=</span> <span class="nx">stopPointLatLonObject</span><span class="p">[</span><span class="s2">&quot;e&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">check_done</span> <span class="o">=</span> <span class="s2">&quot;done&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">check</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">check_done</span> <span class="o">===</span> <span class="s2">&quot;done&quot;</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>       <span class="nx">url</span><span class="o">:</span><span class="s1">&#39;/restaurants/yelp_search&#39;</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">data</span><span class="o">:</span><span class="p">(</span>
</span><span class='line'>         <span class="s1">&#39;lat=&#39;</span> <span class="o">+</span> <span class="nx">stopPointLat</span> <span class="o">+</span> <span class="s1">&#39;&amp;&#39;</span> <span class="o">+</span>
</span><span class='line'>         <span class="s1">&#39;lon=&#39;</span> <span class="o">+</span> <span class="nx">stopPointLon</span> <span class="o">+</span> <span class="s1">&#39;&amp;&#39;</span> <span class="o">+</span>
</span><span class='line'>         <span class="s1">&#39;type=&#39;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#type&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;&amp;&#39;</span> <span class="o">+</span>
</span><span class='line'>         <span class="s1">&#39;sort=&#39;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#sort&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;&amp;&#39;</span> <span class="o">+</span>
</span><span class='line'>         <span class="s1">&#39;mtd=&#39;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#mtd&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span>
</span><span class='line'>       <span class="p">)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">check</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The getStopPoint function goes through the polyline (we&rsquo;re dealing with the lovely Google Maps API here) and finds the stopping point. The most important part of the getStopPoint function is where we define our stopPointLat and stopPointLon variables. Those are the lat/lng coordinates we&rsquo;re going to send to the Yelp API via the ajax call. But, alas, alack! All is going to break if the ajax train leaves the station without its lat/lng coordinates!</p>

<p>How we went about fixing this was by using a check_done variable that is set to &ldquo;not done&rdquo; when it is defined. It only changes to &ldquo;done&rdquo; once stopPointLat and stopPointLon have their values. We use an if/else statement inside the check function to make sure that check_done === &ldquo;done&rdquo; before we send off our ajax call. Else, we setTimeout and run the check function all over again.</p>

<p>I hope that helps anyone out there who might have this problem!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Iterators Schmiterators]]></title>
    <link href="http://ccmeyers.github.io/blog/2014/06/25/iterators-schmiterators/"/>
    
    <updated>2014-06-25T15:32:49-04:00</updated>
    <id>http://ccmeyers.github.io/blog/2014/06/25/iterators-schmiterators</id>
    
    <content type="html"><![CDATA[<h2>Choosing Between Each, Map, Collect, Select, or Detect</h2>

<p>Sometimes it can be confusing for a ruby newbie to know what method to use when iterating over an array or hash. Most tutorials focus on the each method like a prized first child and then gloss over the others. That can leave a lot of newbies writing extra code trying to make the each method work when they could use a different iterator with more ease.</p>

<p>The easiest way to decide which iterator to use is to ask yourself a few questions about the block of code you are passing in your iteration.</p>

<p><img class="center" src="http://ccmeyers.github.io/images/Iterator_Tree.jpg" width="750" height="750" title="Iterator Tree" alt="Iterator Tree"></p>

<p>The first question is, &ldquo;Are you &lsquo;puts&#8217;ing elements?&rdquo; For that, you would want to use &#8216;each&rsquo; so that you can simply puts without altering the original array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;The number is </span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">.&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="c1">#=&gt; The number is 1.</span>
</span><span class='line'>  <span class="c1">#   The number is 2.</span>
</span><span class='line'>  <span class="c1">#   The number is 3.</span>
</span><span class='line'>  <span class="c1">#   The number is 4.</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you aren&rsquo;t &lsquo;puts&#8217;ing elements, you need to ask, &ldquo;Do you want to pass each element through the block and then return a new array or hash?&rdquo; The key words here are &#8216;return a new array or hash&rsquo;. The &lsquo;each&rsquo; method won&rsquo;t do that. It will just return the old array or hash no matter what you do with the elements in the block. If you know you want to create a new array or hash, you have to then ask, &ldquo;Are you only evaluating truthiness?&rdquo; If you are, &lsquo;select&rsquo; or &lsquo;detect&rsquo; are the way to go.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span><span class="o">.</span><span class="n">odd?</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1">#=&gt; [1,3]</span>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span><span class="o">.</span><span class="n">odd?</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1">#=&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>&lsquo;Select&rsquo; will return an array of all the elements that evaluate to true, while &lsquo;detect&rsquo; will return only the first element that evaluates to true.</p>

<p>If you want to create a new array or hash AND you are doing something other than evaluating truthiness, you&rsquo;ll want to use &lsquo;map&rsquo; or &lsquo;collect&rsquo;. These two do the same thing. The only differences being: you have four less characters to type with &lsquo;map&rsquo;, but &lsquo;collect&rsquo; describes a bit better what you are actually doing. Choose as you will.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span><span class="o">*</span><span class="mi">10</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1">#=&gt; [10, 20, 30, 40] </span>
</span></code></pre></td></tr></table></div></figure>


<p>One piece of advice: beware of sandwich coding. This happens if you are trying to use &lsquo;each&rsquo; where you want to use &lsquo;map&rsquo;/&lsquo;collect&rsquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">new_array</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">new_array</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="o">*</span><span class="mi">10</span> <span class="p">}</span>
</span><span class='line'><span class="n">new_array</span>
</span><span class='line'>  <span class="c1">#=&gt; [10, 20, 30, 40]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You see how I had to add two extra lines to set up the variable as an empty array and then call the variable after the code was passed? Those lines are the bread to the &lsquo;each&rsquo; meat. Avoid this. Even if you love sandwiches. I love sandwiches.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[The Surprising Accessibility of Coding]]></title>
    <link href="http://ccmeyers.github.io/blog/2014/06/11/first-post-6-dot-11-dot-14/"/>
    
    <updated>2014-06-11T23:44:16-04:00</updated>
    <id>http://ccmeyers.github.io/blog/2014/06/11/first-post-6-dot-11-dot-14</id>
    
    <content type="html"><![CDATA[<p>If you had come up to me a year ago and told me that I would become a web developer, I would have laughed in your face…hard. But here I am, after having a career as a professional opera singer, learning Ruby, a back-end web programming language used to develop some pretty complex web applications. And I’m actually liking it.</p>

<p>
Like many, when I thought of programming, a stereo-type came to mind: one of a socially awkward loner whose brain works at lightning speed and is most likely a genius at math. And when I decided to switch careers at 30, I never thought of coding as a possibility. I was after all, coming from the world of opera. Opera singer turned coder? Ha! But then, at the urging of multiple friends, I decided to give it a chance. 
</p>


<p>
What I discovered was that I was completely wrong about coding. It isn’t just for rocket-scientists and math geniuses. Not to say it isn’t hard. It is. I’m working my ass off. But I found it isn’t this unachievable thing that only people very far-removed from me can accomplish.
</p>


<p>
I quickly discovered, that I already had skills that are applicable to coding. Programming languages are just that, languages. And more and more, these languages are being developed to mimic the english language. Ruby is a great example of this. Want the word “Hello” to appear on your computer screen? Code in “puts ‘Hello’”. That makes a lot more sense than you thought it would, doesn’t it? Of course, it gets way more complicated than that. But it’s a great example of how learning a programming language is just learning new vocabulary within a new syntax. Anyone who has spent time learning a foreign language, already has experience with this. 
</p>


<p>
I was also surprised by the creativity involved in coding. It isn’t just writing a bunch of zeros and ones that will sit on a server all alone like a chubby girl at a school dance. It’s building something that will speak to the world and could even change someone’s life…or just let them buy shoes, which is also cool. There are a million different ways, especially in Ruby, that allow you to code the same thing. You have a lot more freedom than you think and this is where you can let your creativity flow.
</p>


<p>
In the future, most of my blog posts will be more technical, focusing on specific aspects of Ruby and coding in general. But I thought it was so important to address this huge misconception the majority of humanity has when it comes to this profession. I urge you take a stab at it. Try your hand at HTML at <a href="http://code.org">code.org</a> or <a href="http://www.codecademy.com">codecademy</a>. Or, if you are an experienced coder who wants to help make coding more accessible to more people, volunteer for such non-profits as <a href="http://girlswhocode.com">Girls Who Code</a> or <a href="http://www.coderdojonyc.com">CoderDojo NYC</a> and help spread the code.
</p>

]]></content>
    
  </entry>
  
</feed>