<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron&nbsp;School | An Unexpected Coder]]></title>
  <link href="http://anunexpectedcoder.com/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://anunexpectedcoder.com/"/>
  <updated>2016-03-09T13:37:48-05:00</updated>
  <id>http://anunexpectedcoder.com/</id>
  <author>
    <name><![CDATA[Catherine Meyers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Boot it Up, Baby]]></title>
    <link href="http://anunexpectedcoder.com/blog/2014/09/01/starting-a-simple-server/"/>
    <updated>2014-09-01T18:00:52-04:00</updated>
    <id>http://anunexpectedcoder.com/blog/2014/09/01/starting-a-simple-server</id>
    <content type="html"><![CDATA[<h2>How to Start a Simple Local Server</h2>

<p>Sometimes when building a simple website, it&rsquo;s tempting to check your changes by viewing your file(s) in a browser. But have you ever gotten stuck when some of your more complicated code isn&rsquo;t working even though you KNOW IT SHOULD?!?!?!</p>

<p>Maybe you&rsquo;re getting errors in the console like &ldquo;XMLHttpRequest cannot load file:&hellip; Cross origin requests are only supported for HTTP&rdquo;?</p>

<p>Well, the problem might not be you. It might just be your not running a local server. This happened to me while working with AngularJS&rsquo;s custom directives and to a friend while working with popcorn.js.</p>

<p>&ldquo;But I&rsquo;m not using Rails or Sinatra,&rdquo; you say?</p>

<p>&ldquo;But I can&rsquo;t type &lsquo;shotgun&rsquo; or &lsquo;rails s&rsquo; into my terminal,&rdquo; you declare?</p>

<p>Want to know a trick?</p>

<p><code>bash
brew install python
</code>
I know, it feels like you&rsquo;re cheating on Ruby. But, she&rsquo;ll never know, I swear.</p>

<p><code>bash
python -m SimpleHTTPServer 8000
</code>
Then, just open up <a href="http://localhost:8000/">http://localhost:8000/</a> in your browser, and you&rsquo;ll be on your way!</p>

<p>If your code still doesn&rsquo;t work while on this local server&hellip;it might just be your code. So&hellip;there&rsquo;s that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zip It, and Zip it Good]]></title>
    <link href="http://anunexpectedcoder.com/blog/2014/08/13/zip-it/"/>
    <updated>2014-08-13T19:42:16-04:00</updated>
    <id>http://anunexpectedcoder.com/blog/2014/08/13/zip-it</id>
    <content type="html"><![CDATA[<p>Sometimes scraping can be a complete pain when the site you&rsquo;re dealing with is poorly structured. While trying to scrape composers and their respective musical pieces from a site, we ran into a problem because a composer&rsquo;s pieces were not nested within that composer. Enter the ZIP method, the coolest method I had never heard of that I found out about today.</p>

<p>Here&rsquo;s an example of the html structure we were dealing with:
```html</p>

<div lang="en" dir="ltr" class="mw-content-ltr">
  <p><b>Alejandre Prada, Manuel</b></p>

  <dl>
    <dd>Suite, Op.44</dd>
  </dl>

  <p><b>Barthe, Adrien</b></p>

  <dl>
    <dd>Aubade</dd>
  </dl>
</div>


<p><code>
It was easy to grab the composers and pieces seperately:
</code>ruby
composers = @doc.css(&lsquo;div.mw-content-ltr p&rsquo;)
  #=>[#&lt;Nokogiri::XML::Element:0x816eb2a8 name=&ldquo;p&rdquo; children=[#&lt;Nokogiri::XML::Element:0x816eb0c8 name=&ldquo;b&rdquo; children=[#&lt;Nokogiri::XML::Text:0x816eaee8 &ldquo;Alejandre Prada, Manuel&rdquo;>]>, #&lt;Nokogiri::XML::Text:0x816ead44 &ldquo;\n&rdquo;>]>, #&lt;Nokogiri::XML::Element:0x816ef894 name=&ldquo;p&rdquo; children=[#&lt;Nokogiri::XML::Element:0x816ef6b4 name=&ldquo;b&rdquo; children=[#&lt;Nokogiri::XML::Text:0x816ef4d4 &ldquo;Barthe, Adrien&rdquo;>]
pieces = @doc.css(&lsquo;div.mw-content-ltr dl&rsquo;)
  #=>[#&lt;Nokogiri::XML::Element:0x816eaaec name=&ldquo;dl&rdquo; children=[#&lt;Nokogiri::XML::Element:0x816ea90c name=&ldquo;dd&rdquo; children=[#&lt;Nokogiri::XML::Text:0x816ea72c &ldquo; &rdquo;>, #&lt;Nokogiri::XML::Element:0x816ea678 name=&ldquo;a&rdquo; attributes=[#&lt;Nokogiri::XML::Attr:0x816ea614 name=&ldquo;href&rdquo; value=&ldquo;/wiki/Suite,<em>Op.44</em>(Alejandre_Prada,<em>Manuel)&rdquo;>, #&lt;Nokogiri::XML::Attr:0x816ea600 name=&ldquo;title&rdquo; value=&ldquo;Suite, Op.44 (Alejandre Prada, Manuel)&rdquo;>, #&lt;Nokogiri::XML::Attr:0x816ea5ec name=&ldquo;class&rdquo; value=&ldquo;mw-redirect&rdquo;>] children=[#&lt;Nokogiri::XML::Text:0x816efd80 &ldquo;Suite, Op.44&rdquo;>]>, #&lt;Nokogiri::XML::Text:0x816efbdc &ldquo;\n&rdquo;>]>]>, #&lt;Nokogiri::XML::Element:0x816ef0d8 name=&ldquo;dl&rdquo; children=[#&lt;Nokogiri::XML::Element:0x816eeef8 name=&ldquo;dd&rdquo; children=[#&lt;Nokogiri::XML::Text:0x816eed18 &ldquo; &rdquo;>, #&lt;Nokogiri::XML::Element:0x816eec64 name=&ldquo;a&rdquo; attributes=[#&lt;Nokogiri::XML::Attr:0x816eec00 name=&ldquo;href&rdquo; value=&ldquo;/wiki/Aubade</em>(Barthe,_Adrien)&rdquo;>, #&lt;Nokogiri::XML::Attr:0x816eebec name=&ldquo;title&rdquo; value=&ldquo;Aubade (Barthe, Adrien)&rdquo;>] children=[#&lt;Nokogiri::XML::Text:0x816ee5ac &ldquo;Aubade&rdquo;>]>, #&lt;Nokogiri::XML::Text:0x816ee408 &ldquo;\n&rdquo;>]>]>,
<code>
And iterate through them, putting the text into arrays:
</code>ruby
composers_names = composers.collect {|e|e.text.gsub(&ldquo;\n&rdquo;, &ldquo;&rdquo;)}
  #=>[&ldquo;Alejandre Prada, Manuel&rdquo;, &ldquo;Barthe, Adrien&rdquo;]
pieces_names = pieces.collect {|e|e.text}
  #=>[&ldquo; Suite, Op.44&rdquo;, &ldquo; Aubade&rdquo;]
<code>
Then, we had to put these two arrays back together! So...we zipped 'em!
</code>ruby
composers_pieces = composers_names.zip(pieces_names)
  #=>[[&ldquo;Alejandre Prada, Manuel&rdquo;, &ldquo; Suite, Op.44&rdquo;], [&ldquo;Barthe, Adrien&rdquo;, &ldquo; Aubade&rdquo;]]
<code>
Hooray! We now have paired the correct piece with the correct composer. All we had to do then was iterate through our arrays to create hashes: assigning array[0] as the key and array[1..-1] as the value. We needed [1..-1] because sometimes a composer has multiple pieces.
</code>ruby
composers_pieces.collect {|array| {array[0] => array[1..-1]}}
  #=> [{&ldquo;Alejandre Prada, Manuel&rdquo;=>[&ldquo; Suite, Op.44&rdquo;]}, {&ldquo;Barthe, Adrien&rdquo;=>[&ldquo; Aubade&rdquo;]}]
```
From there it was easy to save the key as the composer and the value as that composer&rsquo;s piece. Thank you to my team members for their help with this today. Shout out to <a href="http://rebeccagreenblatt.github.io/">Rebecca Greenblatt</a> and <a href="http://wlowry88.github.io/">Will Lowry</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Premature Ajaxulation]]></title>
    <link href="http://anunexpectedcoder.com/blog/2014/08/10/premature-ajaxulation/"/>
    <updated>2014-08-10T00:01:10-04:00</updated>
    <id>http://anunexpectedcoder.com/blog/2014/08/10/premature-ajaxulation</id>
    <content type="html"><![CDATA[<h2>Don&rsquo;t worry, it happens to a lot of functions</h2>

<p>Recently, while building an app that used a lot of ajax calls, we kept on running into the problem of an ajax call firing before the function above it finished. Given that the function above provided variables that were necessary in our ajax call, this broke everything.</p>

<p>My team and I scoured the internet (i.e. stack overflow) for an answer, but came up with nothing. We finally asked a Flatiron School TA, and she gave a us a great solution.</p>

<p>We were building an app that calculates the half-way point of a given route. Then, we used the latitude and longitude of that point to search the Yelp API. The ajax call helps us get our javascript variables to the ruby method that directly deals with the API. And, here&rsquo;s what it looks like:</p>

<p>```javascript
var check_done = &ldquo;not done&rdquo;</p>

<p>function getStopPoint(response, percentage) {
  var totalDist = response.routes[0].legs[0].distance.value,</p>

<pre><code>  totalTime = response.routes[0].legs[0].duration.value,
  distance = (percentage/100) * totalDist,
  time = ((percentage/100) * totalTime/60).toFixed(2),
  polyline = new google.maps.Polyline({
    path: [],
    strokeColor: '#FF0000',
    strokeWeight: 3
  });
  var bounds = new google.maps.LatLngBounds();
  var steps = response.routes[0].legs[0].steps;
  for (j=0; j&lt;steps.length; j++) {
    var nextSegment = steps[j].path;
    for (k=0; k&lt;nextSegment.length; k++) {
      polyline.getPath().push(nextSegment[k]);
      bounds.extend(nextSegment[k]);
    }
  }
</code></pre>

<p>  stopPointLatLonObject = polyline.GetPointAtDistance(distance);
  placeMarker(stopPointLatLonObject);
  stopPointLat = stopPointLatLonObject[&ldquo;d&rdquo;];
  stopPointLon = stopPointLatLonObject[&ldquo;e&rdquo;];
  check_done = &ldquo;done&rdquo;;
}</p>

<p>function check(){
  if (check_done === &ldquo;done&rdquo;){</p>

<pre><code>$.ajax({
   url:'/restaurants/yelp_search', 
   type: 'POST',
   data:(
     'lat=' + stopPointLat + '&amp;' +
     'lon=' + stopPointLon + '&amp;' +
     'type=' + $("#type").val() + '&amp;' +
     'sort=' + $("#sort").val() + '&amp;' +
     'mtd=' + $("#mtd").val()
   )
});
</code></pre>

<p>  } else {</p>

<pre><code>setTimeout(check, 1000);
</code></pre>

<p>  }
}
```</p>

<p>The getStopPoint function goes through the polyline (we&rsquo;re dealing with the lovely Google Maps API here) and finds the stopping point. The most important part of the getStopPoint function is where we define our stopPointLat and stopPointLon variables. Those are the lat/lng coordinates we&rsquo;re going to send to the Yelp API via the ajax call. But, alas, alack! All is going to break if the ajax train leaves the station without its lat/lng coordinates!</p>

<p>How we went about fixing this was by using a check_done variable that is set to &ldquo;not done&rdquo; when it is defined. It only changes to &ldquo;done&rdquo; once stopPointLat and stopPointLon have their values. We use an if/else statement inside the check function to make sure that check_done === &ldquo;done&rdquo; before we send off our ajax call. Else, we setTimeout and run the check function all over again.</p>

<p>I hope that helps anyone out there who might have this problem!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iterators Schmiterators]]></title>
    <link href="http://anunexpectedcoder.com/blog/2014/06/25/iterators-schmiterators/"/>
    <updated>2014-06-25T15:32:49-04:00</updated>
    <id>http://anunexpectedcoder.com/blog/2014/06/25/iterators-schmiterators</id>
    <content type="html"><![CDATA[<h2>Choosing Between Each, Map, Collect, Select, or Detect</h2>

<p>Sometimes it can be confusing for a ruby newbie to know what method to use when iterating over an array or hash. Most tutorials focus on the each method like a prized first child and then gloss over the others. That can leave a lot of newbies writing extra code trying to make the each method work when they could use a different iterator with more ease.</p>

<p>The easiest way to decide which iterator to use is to ask yourself a few questions about the block of code you are passing in your iteration.</p>

<p><img class="center" src="/images/Iterator_Tree.jpg" width="750" height="750" title="&lsquo;Iterator Tree&rsquo; &lsquo;Iterator Tree&rsquo;" ></p>

<p>The first question is, &ldquo;Are you &lsquo;puts'ing elements?&rdquo; For that, you would want to use 'each&rsquo; so that you can simply puts without altering the original array.</p>

<p><code>ruby
array = [1,2,3,4]
array.each { |n| puts "The number is #{n}."}
  #=&gt; The number is 1.
  #   The number is 2.
  #   The number is 3.
  #   The number is 4.
</code>
If you aren&rsquo;t &lsquo;puts'ing elements, you need to ask, &ldquo;Do you want to pass each element through the block and then return a new array or hash?&rdquo; The key words here are 'return a new array or hash&rsquo;. The &lsquo;each&rsquo; method won&rsquo;t do that. It will just return the old array or hash no matter what you do with the elements in the block. If you know you want to create a new array or hash, you have to then ask, &ldquo;Are you only evaluating truthiness?&rdquo; If you are, &lsquo;select&rsquo; or &lsquo;detect&rsquo; are the way to go.
<code>ruby
array.select { |n| n.odd? }
  #=&gt; [1,3]
array.detect { |n| n.odd? }
  #=&gt; 1
</code>
&lsquo;Select&rsquo; will return an array of all the elements that evaluate to true, while &lsquo;detect&rsquo; will return only the first element that evaluates to true.</p>

<p>If you want to create a new array or hash AND you are doing something other than evaluating truthiness, you&rsquo;ll want to use &lsquo;map&rsquo; or &lsquo;collect&rsquo;. These two do the same thing. The only differences being: you have four less characters to type with &lsquo;map&rsquo;, but &lsquo;collect&rsquo; describes a bit better what you are actually doing. Choose as you will.
<code>ruby
array.collect { |n| n*10 }
  #=&gt; [10, 20, 30, 40]
</code>
One piece of advice: beware of sandwich coding. This happens if you are trying to use &lsquo;each&rsquo; where you want to use &lsquo;map&rsquo;/&lsquo;collect&rsquo;.
<code>ruby
new_array = []
array.each { |n| new_array &lt;&lt; n*10 }
new_array
  #=&gt; [10, 20, 30, 40]
</code>
You see how I had to add two extra lines to set up the variable as an empty array and then call the variable after the code was passed? Those lines are the bread to the &lsquo;each&rsquo; meat. Avoid this. Even if you love sandwiches. I love sandwiches.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Surprising Accessibility of Coding]]></title>
    <link href="http://anunexpectedcoder.com/blog/2014/06/11/first-post-6-dot-11-dot-14/"/>
    <updated>2014-06-11T23:44:16-04:00</updated>
    <id>http://anunexpectedcoder.com/blog/2014/06/11/first-post-6-dot-11-dot-14</id>
    <content type="html"><![CDATA[<p>If you had come up to me a year ago and told me that I would become a web developer, I would have laughed in your face…hard. But here I am, after having a career as a professional opera singer, learning Ruby, a back-end web programming language used to develop some pretty complex web applications. And I’m actually liking it.</p>

<p>
Like many, when I thought of programming, a stereo-type came to mind: one of a socially awkward loner whose brain works at lightning speed and is most likely a genius at math. And when I decided to switch careers at 30, I never thought of coding as a possibility. I was after all, coming from the world of opera. Opera singer turned coder? Ha! But then, at the urging of multiple friends, I decided to give it a chance. 
</p>


<p>
What I discovered was that I was completely wrong about coding. It isn’t just for rocket-scientists and math geniuses. Not to say it isn’t hard. It is. I’m working my ass off. But I found it isn’t this unachievable thing that only people very far-removed from me can accomplish.
</p>


<p>
I quickly discovered, that I already had skills that are applicable to coding. Programming languages are just that, languages. And more and more, these languages are being developed to mimic the english language. Ruby is a great example of this. Want the word “Hello” to appear on your computer screen? Code in “puts ‘Hello’”. That makes a lot more sense than you thought it would, doesn’t it? Of course, it gets way more complicated than that. But it’s a great example of how learning a programming language is just learning new vocabulary within a new syntax. Anyone who has spent time learning a foreign language, already has experience with this. 
</p>


<p>
I was also surprised by the creativity involved in coding. It isn’t just writing a bunch of zeros and ones that will sit on a server all alone like a chubby girl at a school dance. It’s building something that will speak to the world and could even change someone’s life…or just let them buy shoes, which is also cool. There are a million different ways, especially in Ruby, that allow you to code the same thing. You have a lot more freedom than you think and this is where you can let your creativity flow.
</p>


<p>
In the future, most of my blog posts will be more technical, focusing on specific aspects of Ruby and coding in general. But I thought it was so important to address this huge misconception the majority of humanity has when it comes to this profession. I urge you take a stab at it. Try your hand at HTML at <a href="http://code.org">code.org</a> or <a href="http://www.codecademy.com">codecademy</a>. Or, if you are an experienced coder who wants to help make coding more accessible to more people, volunteer for such non-profits as <a href="http://girlswhocode.com">Girls Who Code</a> or <a href="http://www.coderdojonyc.com">CoderDojo NYC</a> and help spread the code.
</p>

]]></content>
  </entry>
  
</feed>
